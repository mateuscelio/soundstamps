(()=>{"use strict";const t={deleteTsByLink:async function(t,i){const s=await this.findByLink(t);s.timestamps=s.timestamps.filter((t=>t.link!==i)),console.log(s.timestamps),0===s.timestamps.length?await this.deleteSoundByLink(t):await this.upInsertSound(s)},deleteSoundByLink:async function(t){let i=await this.list();i=i.filter((i=>i.link!==t)),this.saveSounds(i)},updateSoundTimestamp:async function(t){const i=await this.findByLink(t.link);let s;i?(s=i,s.timestamps.push({link:t.timestampLink,time:t.timestamp})):s={title:t.title,link:t.link,timestamps:[{link:t.timestampLink,time:t.timestamp}]},await this.upInsertSound(s)},upInsertSound:async function(t){const i=await this.list(),s=i.findIndex((i=>i.link==t.link));s>-1?i[s]=t:i.push(t),await this.saveSounds(i)},findByLink:async function(t){const i=await this.list();if(i)return i.find((i=>i.link==t))},list:async function(){const{sounds:t}=await browser.storage.local.get("sounds");return t||[]},saveSounds:async function(t){await browser.storage.local.set({sounds:t})},clearAll:async function(){await browser.storage.local.clear()}};browser.runtime.onMessage.addListener((async function(i){await t.updateSoundTimestamp(i),browser.notifications.create({type:"basic",title:"Sound timestamped successfully!",message:`Time "${i.timestamp}" of track "${i.title}" saved!`})}))})();